stages:
  - test
production:
  before_script:
    - nvm use --delete-prefix v14.4.0 --silent
  environment:
    name: production
  script:
    - source /home/gitlab-runner/.bash_profile
    - nvm install ${NODE_VERSION}
    - nvm use ${NODE_VERSION}

    - echo "DB_HOST=${DB_HOST}" >> .env
    - echo "DB_NAME=${DB_NAME}" >> .env
    - echo "DB_PASSWORD=${DB_PASSWORD}" >> .env
    - echo "DB_USERNAME=${DB_USERNAME}" >> .env
    - echo "SALESFORCE_TOKEN_URL=${SALESFORCE_TOKEN_URL}" >> .env
    - echo "SALESFORCE_TOKEN_USERNAME=${SALESFORCE_TOKEN_USERNAME}" >> .env
    - echo "SALESFORCE_TOKEN_CLIENT_SECRET=${SALESFORCE_TOKEN_CLIENT_SECRET}" >> .env
    - echo "SALESFORCE_TOKEN_CLIENT_ID=${SALESFORCE_TOKEN_CLIENT_ID}" >> .env
    - echo "SALES_FORCE_BASE_API=${SALES_FORCE_BASE_API}" >> .env
    - echo "SALESFORCE_TOKEN_PASSWORD=${SALESFORCE_TOKEN_PASSWORD}" >> .env

    - cat .env

    - sudo npm install -g serverless
    - sudo npm install --save-dev serverless-webpack@latest
    - sudo npm install --save-dev serverless-offline
    - sudo npm i

    - aws configure set region ${AWS_CONFIG_REGION}
    - aws configure set aws_access_key_id ${AWS_CONFIG_ACCESS}
    - aws configure set aws_secret_access_key ${AWS_CONFIG_SECRET}
    - aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin 613667165148.dkr.ecr.us-east-1.amazonaws.com
    - serverless deploy --stage production --verbose

  tags:
    - aws-ecomm-latam
    - aws-node-qa
  only:
    - master

stages:
  - test
develop:
  before_script:
    - nvm use --delete-prefix v14.4.0 --silent
  environment:
    name: staging
  script:
    - source /home/gitlab-runner/.bash_profile
    - nvm install ${NODE_VERSION}
    - nvm use ${NODE_VERSION}

    - echo "DB_HOST=${DB_HOST}" >> .env
    - echo "DB_NAME=${DB_NAME}" >> .env
    - echo "DB_PASSWORD=${DB_PASSWORD}" >> .env
    - echo "DB_USERNAME=${DB_USERNAME}" >> .env
    - echo "SALESFORCE_TOKEN_URL=${SALESFORCE_TOKEN_URL}" >> .env
    - echo "SALESFORCE_TOKEN_USERNAME=${SALESFORCE_TOKEN_USERNAME}" >> .env
    - echo "SALESFORCE_TOKEN_CLIENT_SECRET=${SALESFORCE_TOKEN_CLIENT_SECRET}" >> .env
    - echo "SALESFORCE_TOKEN_CLIENT_ID=${SALESFORCE_TOKEN_CLIENT_ID}" >> .env
    - echo "SALES_FORCE_BASE_API=${SALES_FORCE_BASE_API}" >> .env
    - echo "SALESFORCE_TOKEN_PASSWORD=${SALESFORCE_TOKEN_PASSWORD}" >> .env

    - cat .env

    - sudo npm install -g serverless
    - sudo npm install --save-dev serverless-webpack@latest
    - sudo npm install --save-dev serverless-offline
    - sudo npm i

    - aws configure set region ${AWS_CONFIG_REGION}
    - aws configure set aws_access_key_id ${AWS_CONFIG_ACCESS}
    - aws configure set aws_secret_access_key ${AWS_CONFIG_SECRET}
    - aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin 613667165148.dkr.ecr.us-east-1.amazonaws.com
    - serverless deploy

  tags:
    - aws-ecomm-latam
    - aws-node-qa
  only:
    - staging

stages:
  - test
qa:
  before_script:
    - nvm use --delete-prefix v14.4.0 --silent
  environment:
    name: qa
  script:
    - source /home/gitlab-runner/.bash_profile
    - nvm install ${NODE_VERSION}
    - nvm use ${NODE_VERSION}

    - echo "DB_HOST=${DB_HOST}" >> .env
    - echo "DB_NAME=${DB_NAME}" >> .env
    - echo "DB_PASSWORD=${DB_PASSWORD}" >> .env
    - echo "DB_USERNAME=${DB_USERNAME}" >> .env
    - echo "SALESFORCE_TOKEN_URL=${SALESFORCE_TOKEN_URL}" >> .env
    - echo "SALESFORCE_TOKEN_USERNAME=${SALESFORCE_TOKEN_USERNAME}" >> .env
    - echo "SALESFORCE_TOKEN_CLIENT_SECRET=${SALESFORCE_TOKEN_CLIENT_SECRET}" >> .env
    - echo "SALESFORCE_TOKEN_CLIENT_ID=${SALESFORCE_TOKEN_CLIENT_ID}" >> .env
    - echo "SALES_FORCE_BASE_API=${SALES_FORCE_BASE_API}" >> .env
    - echo "SALESFORCE_TOKEN_PASSWORD=${SALESFORCE_TOKEN_PASSWORD}" >> .env

    - cat .env

    - sudo npm install -g serverless
    - sudo npm install --save-dev serverless-webpack@latest
    - sudo npm install --save-dev serverless-offline
    - sudo npm i

    - npm run test

  tags:
    - aws-ecomm-latam
    - aws-node-qa
  only:
    - feature/test-qa
